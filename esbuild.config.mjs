import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

import fs from "fs";
import path from "path";
import os from "os";

const manifest = JSON.parse(fs.readFileSync("manifest.json", "utf8"));

function copyFile(source, destination) {
  fs.copyFile(source, destination, (err) => {
    if (err) {
      console.error("Error copying file:", err);
    } else {
      console.log(`${source} was copied to ${destination}`);
    }
  });
}
const homeDir = os.homedir();
const pluginName = manifest.id;
const destinationDir = path.join(
  homeDir,
  process.env.OBSIDIAN_VAULT_PLUGINS_PATH,
  pluginName
);

// Create destinationDir if it doesn't exist
if (!fs.existsSync(destinationDir)) {
  fs.mkdirSync(destinationDir, { recursive: true });
  console.log(`Created directory: ${destinationDir}`);
}

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
});

if (prod) {
  await context.rebuild();
  copyFile("main.js", path.join(destinationDir, "main.js"));
  copyFile("manifest.json", path.join(destinationDir, "manifest.json"));
  copyFile("styles.css", path.join(destinationDir, "styles.css"));
  process.exit(0);
} else {
  fs.watch("main.js", (eventType, filename) => {
    if (filename && eventType === "change") {
      console.log("main.js changed, copying...");
      copyFile("main.js", path.join(destinationDir, "main.js"));
      copyFile("manifest.json", path.join(destinationDir, "manifest.json"));
      copyFile("styles.css", path.join(destinationDir, "styles.css"));
      fs.closeSync(fs.openSync(path.join(destinationDir, ".hotreload"), "w"));
    }
  });

  await context.watch();

  console.log("watching...");
}

process.stdin.on("close", () => {
  process.exit(0);
});
